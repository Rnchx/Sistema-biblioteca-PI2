const API_BASE_URL = 'http://localhost:3000';

let alunoLogado = null;

// Inicializa√ß√£o da p√°gina
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ P√°gina de classifica√ß√£o carregada');
    
    // Verificar login e carregar dados
    alunoLogado = verificarLogin();
    
    if (alunoLogado) {
        console.log('‚úÖ Aluno logado:', alunoLogado.nome);
        inicializarPagina();
    } else {
        console.log('‚ùå Aluno n√£o logado');
    }
});

// Verifica√ß√£o de login
function verificarLogin() {
    const alunoLogado = JSON.parse(sessionStorage.getItem('alunoLogado'));
    
    if (!alunoLogado || !alunoLogado.loggedIn) {
        alert('Voc√™ precisa fazer login para acessar esta p√°gina');
        window.location.href = './loginPage.html';
        return null;
    }
    
    // Verificar se a sess√£o expirou (8 horas)
    const tempoExpiracao = 8 * 60 * 60 * 1000;
    const tempoAtual = new Date().getTime();
    
    if (tempoAtual - alunoLogado.timestamp > tempoExpiracao) {
        alert('Sess√£o expirou. Fa√ßa login novamente.');
        sessionStorage.removeItem('alunoLogado');
        window.location.href = './loginPage.html';
        return null;
    }
    
    return alunoLogado;
}

// Inicializar p√°gina
async function inicializarPagina() {
    try {
        console.log('üéØ Inicializando p√°gina...');
        
        // Adicionar informa√ß√µes do aluno no header
        adicionarInfoAlunoHeader(alunoLogado);
        
        // Atualizar nome do aluno
        document.getElementById('nomeAlunoTexto').textContent = alunoLogado.nome;
        
        // Carregar classifica√ß√£o do leitor
        await carregarClassificacaoLeitor();
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        mostrarErroClassificacao();
    }
}

// Adicionar informa√ß√µes do aluno no header
function adicionarInfoAlunoHeader(aluno) {
    const faixaAzul = document.getElementById('containerFaixaAzul');
    if (faixaAzul) {
        // Remover info anterior se existir
        const infoAnterior = faixaAzul.querySelector('.info-aluno-header');
        if (infoAnterior) {
            infoAnterior.remove();
        }

        const infoAluno = document.createElement('div');
        infoAluno.className = 'info-aluno-header';
        infoAluno.innerHTML = `
            <i class="fas fa-user" style="margin-right: 5px;"></i>
            ${aluno.nome} | RA: ${aluno.ra}
        `;
        faixaAzul.appendChild(infoAluno);
        
        console.log('üìù Informa√ß√µes do aluno adicionadas no header');
    }
}

// Carregar classifica√ß√£o do leitor da API
async function carregarClassificacaoLeitor() {
    try {
        console.log('üìä Iniciando carregamento da classifica√ß√£o...');
        
        // Mostrar estado de carregamento
        document.getElementById('tituloClassificacao').textContent = 'CARREGANDO...';
        document.getElementById('descricaoClassificacao').textContent = 'Aguarde enquanto buscamos sua classifica√ß√£o';
        
        console.log('üîç Buscando classifica√ß√£o para RA:', alunoLogado.ra);
        
        // Buscar classifica√ß√£o na API
        const response = await fetch(`${API_BASE_URL}/classificacao/aluno/${alunoLogado.ra}`);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üì® Resposta da API:', data);
        
        if (data.success && data.data) {
            console.log('‚úÖ Dados recebidos da API');
            const classificacaoData = data.data.classificacao;
            exibirClassificacao(classificacaoData);
        } else {
            console.log('‚ö†Ô∏è Nenhum dado da API, calculando localmente...');
            // Se n√£o tiver classifica√ß√£o, calcular baseada nos empr√©stimos
            await calcularEExibirClassificacao();
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar classifica√ß√£o:', error);
        // Tentar calcular localmente em caso de erro
        await calcularEExibirClassificacao();
    }
}

// Calcular classifica√ß√£o baseada nos empr√©stimos dos √∫ltimos 6 meses
async function calcularEExibirClassificacao() {
    try {
        console.log('üßÆ Calculando classifica√ß√£o localmente...');
        
        // Buscar hist√≥rico de empr√©stimos dos √∫ltimos 6 meses
        const emprestimos = await buscarHistoricoEmprestimos();
        const totalLivros = emprestimos.length;
        
        console.log(`üìö Total de livros lidos nos √∫ltimos 6 meses: ${totalLivros}`);
        
        // Determinar classifica√ß√£o baseada nos crit√©rios corretos
        const classificacao = determinarClassificacao(totalLivros);
        
        exibirClassificacao(classificacao);
        
    } catch (error) {
        console.error('‚ùå Erro ao calcular classifica√ß√£o:', error);
        mostrarErroClassificacao();
    }
}

// Buscar hist√≥rico de empr√©stimos dos √∫ltimos 6 meses
async function buscarHistoricoEmprestimos() {
    try {
        console.log('üîç Buscando hist√≥rico de empr√©stimos...');
        const response = await fetch(`${API_BASE_URL}/emprestimos/aluno/${alunoLogado.ra}/historico`);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üì® Hist√≥rico recebido:', data);
        return data.success ? data.data : [];
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar hist√≥rico:', error);
        return [];
    }
}

// Determinar classifica√ß√£o baseada nos crit√©rios corretos
function determinarClassificacao(totalLivros) {
    console.log(`üéØ Determinando classifica√ß√£o para ${totalLivros} livros...`);
    
    let tipo, descricao;
    
    if (totalLivros > 20) {
        tipo = 'EXTREMO';
        descricao = 'MAIS DE 20 LIVROS';
    } else if (totalLivros >= 11 && totalLivros <= 20) {
        tipo = 'ATIVO';
        descricao = '11 A 20 LIVROS';
    } else if (totalLivros >= 6 && totalLivros <= 10) {
        tipo = 'REGULAR';
        descricao = '6 A 10 LIVROS';
    } else {
        tipo = 'INICIANTE';
        descricao = totalLivros > 0 ? `AT√â 5 LIVROS` : 'NENHUM LIVRO AINDA';
    }
    
    console.log(`üè∑Ô∏è Classifica√ß√£o determinada: ${tipo} - ${descricao}`);
    
    return {
        tipo,
        descricao,
        totalLivros
    };
}

// Exibir classifica√ß√£o na interface
function exibirClassificacao(classificacaoData) {
    console.log('üé® Exibindo classifica√ß√£o na interface...');
    console.log('üìä Dados da classifica√ß√£o:', classificacaoData);
    
    const tituloElement = document.getElementById('tituloClassificacao');
    const descricaoElement = document.getElementById('descricaoClassificacao');
    const badgeElement = document.getElementById('badgeLeitor');
    
    // Extrair dados da classifica√ß√£o
    const tipo = classificacaoData.tipo || 'INICIANTE';
    const descricao = classificacaoData.descricao || 'NENHUM LIVRO AINDA';
    const totalLivros = classificacaoData.totalLivros || 0;
    
    console.log(`üìù Tipo: "${tipo}", Descri√ß√£o: "${descricao}", Livros: ${totalLivros}`);
    
    // Formatar o texto para exibi√ß√£o (adicionar "LEITOR" se necess√°rio)
    const tipoFormatado = tipo.includes('LEITOR') ? tipo : `LEITOR ${tipo}`;
    tituloElement.textContent = tipoFormatado;
    
    // DESCRI√á√ÉO PERSONALIZADA COM NOME E QUANTIDADE
    let descricaoPersonalizada = '';
    
    if (totalLivros === 0) {
        descricaoPersonalizada = `${alunoLogado.nome} ainda n√£o leu nenhum livro nos √∫ltimos 6 meses`;
    } else if (totalLivros === 1) {
        descricaoPersonalizada = `${alunoLogado.nome} leu ${totalLivros} livro nos √∫ltimos 6 meses`;
    } else {
        descricaoPersonalizada = `${alunoLogado.nome} leu ${totalLivros} livros nos √∫ltimos 6 meses`;
    }
    
    // // Adicionar a faixa de classifica√ß√£o se houver livros
    // if (totalLivros > 0) {
    //     descricaoPersonalizada += ` | ${descricao}`;
    // }
    
    descricaoElement.textContent = descricaoPersonalizada;
    
    // Aplicar classe CSS baseada no tipo
    aplicarClasseClassificacao(badgeElement, tipo);
    
    // Adicionar anima√ß√£o de entrada
    badgeElement.style.opacity = '0';
    badgeElement.style.transform = 'translateY(20px)';
    
    setTimeout(() => {
        badgeElement.style.transition = 'all 0.5s ease';
        badgeElement.style.opacity = '1';
        badgeElement.style.transform = 'translateY(0)';
    }, 100);
    
    console.log('‚úÖ Classifica√ß√£o exibida com sucesso!');
}

// Aplicar classe CSS baseada no tipo de classifica√ß√£o
function aplicarClasseClassificacao(element, tipo) {
    console.log('üé® Aplicando classe CSS...');
    
    // Remover TODAS as classes de classifica√ß√£o
    element.classList.remove(
        'classificacao-extremo',
        'classificacao-ativo', 
        'classificacao-regular',
        'classificacao-iniciante',
        'classificacao-erro'
    );
    
    // Adicionar classe espec√≠fica baseada no tipo
    const tipoUpper = tipo.toUpperCase().trim();
    let classeAplicada = 'classificacao-iniciante';
    
    if (tipoUpper === 'LEITOR EXTREMO' || tipoUpper === 'EXTREMO') {
        classeAplicada = 'classificacao-extremo';
    } else if (tipoUpper === 'LEITOR ATIVO' || tipoUpper === 'ATIVO') {
        classeAplicada = 'classificacao-ativo';
    } else if (tipoUpper === 'LEITOR REGULAR' || tipoUpper === 'REGULAR') {
        classeAplicada = 'classificacao-regular';
    } else if (tipoUpper === 'LEITOR INICIANTE' || tipoUpper === 'INICIANTE') {
        classeAplicada = 'classificacao-iniciante';
    } else {
        classeAplicada = 'classificacao-iniciante';
    }
    
    element.classList.add(classeAplicada);
}

// Mostrar erro na classifica√ß√£o
function mostrarErroClassificacao() {
    console.error('‚ùå Mostrando erro de classifica√ß√£o');
    
    const tituloElement = document.getElementById('tituloClassificacao');
    const descricaoElement = document.getElementById('descricaoClassificacao');
    const badgeElement = document.getElementById('badgeLeitor');
    
    tituloElement.textContent = 'ERRO';
    descricaoElement.textContent = 'N√£o foi poss√≠vel carregar sua classifica√ß√£o';
    
    // Aplicar estilo de erro
    aplicarClasseClassificacao(badgeElement, 'ERRO');
}

// Atualizar classifica√ß√£o periodicamente (opcional)
function iniciarAtualizacaoAutomatica() {
    // Atualizar a cada 2 minutos
    setInterval(() => {
        if (alunoLogado) {
            console.log('üîÑ Atualiza√ß√£o autom√°tica da classifica√ß√£o');
            carregarClassificacaoLeitor();
        }
    }, 120000);
}

// Iniciar atualiza√ß√£o autom√°tica
iniciarAtualizacaoAutomatica();